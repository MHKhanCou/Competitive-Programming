void counting_sort(vector<int> &p, const vector<int> &c)
{
    int n = p.size();
    vector<int> p_new(n), cnt(n + 1);
    for (int x : c) cnt[x + 1]++;
    for (int i = 1; i < n; ++i) cnt[i] += cnt[i - 1];
    for (int x : p) p_new[cnt[c[x]]++] = x;
    p.swap(p_new);
}

vector<int> build_suffix_array(const string &s) {
    int n = s.size();
    vector<int> p(n), c(n), c_new(n);

    // Initial sorting based on single characters
    iota(p.begin(), p.end(), 0);
    sort(p.begin(), p.end(), [&s](int a, int b) { return s[a] < s[b]; });
    c[p[0]] = 0;
    for (int i = 1; i < n; ++i) {
        c[p[i]] = c[p[i - 1]] + (s[p[i]] != s[p[i - 1]]);
    }

    // Sorting by 2^k-length prefixes
    for (int k = 0; (1 << k) < n; ++k) {
        for (int i = 0; i < n; ++i) p[i] = (p[i] - (1 << k) + n) % n;
        counting_sort(p, c);
        c_new[p[0]] = 0;
        for (int i = 1; i < n; ++i) {
            pair<int, int> prev = {c[p[i - 1]], c[(p[i - 1] + (1 << k)) % n]};
            pair<int, int> now = {c[p[i]], c[(p[i] + (1 << k)) % n]};
            c_new[p[i]] = c_new[p[i - 1]] + (now != prev);
        }
        c.swap(c_new);
    }

    return p;
}
