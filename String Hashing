#include <bits/stdc++.h>
using namespace std;
#include <bits/stdc++.h>
#define ll long long
#define pb push_back
#define pii pair<int,int>
#define nl '\n'
#define F first
#define S second
#define tst int t;cin>>t;while(t--)
#define mh ios::sync_with_stdio(false);cin.tie(0);

//need a BigMod here
ll BigMod(ll a, ll b, ll M)
{
    ll res = 1;
    a %= M;
    while (b > 0)
    {
        if (b & 1) res = (res * a) % M;
        b >>= 1;
        a = (a * a) % M;
    }
    return res;
}

const int N = 1e6 + 9;

const int MOD1 = 127657753, MOD2 = 987654319;
const int b1 = 101, b2 = 997;
int inp1, inp2;
pair<int, int> pw[N], inpw[N];
//Template from YouKnowWho and RakibJoy
void precalc()
{
    pw[0] =  {1, 1};
    for (int i = 1; i < N; i++)
    {
        pw[i].first = 1LL * pw[i - 1].first * b1 % MOD1;
        pw[i].second = 1LL * pw[i - 1].second * b2 % MOD2;
    }
    inp2 = BigMod(b2, MOD2 - 2, MOD2);
    inp1 = BigMod(b1, MOD1 - 2, MOD1);
    inpw[0] =  {1, 1};
    for (int i = 1; i < N; i++)
    {
        inpw[i].first = 1LL * inpw[i - 1].first * inp1 % MOD1;
        inpw[i].second = 1LL * inpw[i - 1].second * inp2 % MOD2;
    }

}
struct Hashing
{
    int sz;
    string s; // 0 - indexed string
    vector<pii> hs; // 1 - indexed vector
    Hashing() {}
    Hashing(string _ss)
    {
        sz = _ss.size();
        s = _ss;
        hs.emplace_back(0, 0);
        for (int i = 0; i < sz; i++)
        {
            pii p;
            p.first = (hs[i].first + 1LL * pw[i].first * s[i] % MOD1) % MOD1;
            p.second = (hs[i].second + 1LL * pw[i].second * s[i] % MOD2) % MOD2;
            hs.push_back(p);
        }
    }
    ll get_hash_value(int lo, int hi)   // 1 - indexed
    {
        assert(1 <= lo && lo <= hi && hi <= sz);
        pii ans;
        ans.first = (hs[hi].first - hs[lo - 1].first + MOD1) * 1LL * inpw[lo - 1].first % MOD1;
        ans.second = (hs[hi].second - hs[lo - 1].second + MOD2) * 1LL * inpw[lo - 1].second % MOD2;
        return  ((ll) ans.first << 32) | ans.second;
    }
    ll get_hash_value()
    {
        return get_hash_value(1, sz);
    }

    bool lexographic_less(int l1, int l2, int len)
    {
        if (get_hash_value(l1, l1 + len - 1) ==  get_hash_value(l2, l2 + len - 1)) return false;

        ll lo = 1, hi = len, pos = 0;
        while (lo <= hi)
        {
            int mid = (lo + hi) >> 1;
            if (get_hash_value(l1, l1 + mid - 1) ==  get_hash_value(l2, l2 + mid - 1))
            {
                lo = mid + 1;
                pos = mid;
            }
            else
            {
                hi = mid - 1;
            }
        }
        return s[l1 + pos - 1] < s[l2 + pos - 1];
    }
};

ll merge_hash(ll hash1, ll hash2, int z) //z-len of hash1
{
    int h1_F = hash1 >> 32, h1_S = hash1 & 0xFFFFFFFF;
    int h2_F = hash2 >> 32, h2_S = hash2 & 0xFFFFFFFF;
    int ans_F = (h1_F + 1LL * h2_F * pw[z].first % MOD1) % MOD1;
    int ans_S = (h1_S + 1LL * h2_S * pw[z].second % MOD2) % MOD2;
    return (1LL * ans_F << 32) | ans_S;
}


void solve()
{
    string s;
    cin >> s;
    Hashing h(s);
    int q;
    cin >> q;
    while (q--)
    {
        int l, r;
        cin >> l >> r;
        l++;
        ll ans = h.get_hash_value(l, r);
        cout << ans << nl; // (ll)ans.F*ans.S
    }
}

int main()
{
    mh
    precalc();
    solve();
}
