class Manacher {
    string s;                        // Original string
    vector<vector<int>> p;           // Palindrome lengths (0 for even, 1 for odd)
    int n;                           // Length of the original string

    // Compute palindrome lengths for both odd and even palindromes
    void compute() {
        p.assign(2, vector<int>(n, 0)); // Initialize the radius vectors
        for(int z = 0; z < 2; z++) {
            for(int l = 0, r = 0, i = 0; i < n; i++) {
                if(i < r) p[z][i] = min(r - i + !z, p[z][l + r - i + !z]);

                // Expand around the center
                int L = i - p[z][i], R = i + p[z][i] - !z;

                while (L - 1 >= 0 && R + 1 < n && s[L - 1] == s[R + 1]) {
                    p[z][i]++;
                    L--, R++;
                }

                if (R > r) {
                    l = L, r = R;
                }
            }
        }
    }

public:
    Manacher(const string &input) : s(input), n(input.size()) {
        compute();
    }

    bool isPalindrome(int l, int r) {
        int len = r - l + 1;
        int z = len % 2 == 0;             // Check if even or odd length
        int center = (l + r + z) / 2;     // Calculate the center
        return p[z][center] >= (len + z) / 2;
    }

    // Count all palindromic substrings
    int countPalindromes() {
        int count = 0;
        for (int z = 0; z < 2; z++) {
            count += accumulate(p[z].begin(), p[z].end(), 0);
        }
        return count;
    }

    // Get the longest palindromic substring
    pair<int, int> longestPalindrome() {
        int maxLen = 0, center = 0, zType = 0;
        for (int z = 0; z < 2; z++) {
            for (int i = 0; i < n; i++) {
                if (p[z][i] > maxLen) {
                    maxLen = p[z][i];
                    center = i;
                    zType = z;
                }
            }
        }
        int start = center - maxLen;
        int len = 2 * maxLen + zType;  // Length accounting for even or odd
        return {start, len};
    }
};
