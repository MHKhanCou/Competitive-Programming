// In the name of Alah, the most merciful, the most gracious
#include <bits/stdc++.h>
using namespace std;

const int MOD = 1e9 + 7;

struct Matrix {
    int n, m;
    vector<vector<int>> a;

    Matrix() {}
    Matrix(int _n, int _m) : n(_n), m(_m) {
        a.assign(n, vector<int>(m));
    }
    Matrix(const vector<vector<int>>& v) : n(v.size()), m(v[0].size()), a(v) {}

    void make_identity() {
        assert(n == m);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                a[i][j] = (i == j);
            }
        }
    }

    Matrix operator+(const Matrix& b) const {
        assert(n == b.n && m == b.m);
        Matrix res(n, m);
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < m; ++j)
                res.a[i][j] = (a[i][j] + b.a[i][j]) % MOD;
        return res;
    }

    Matrix operator-(const Matrix& b) const {
        assert(n == b.n && m == b.m);
        Matrix res(n, m);
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < m; ++j)
                res.a[i][j] = (a[i][j] - b.a[i][j] + MOD) % MOD;
        return res;
    }

    Matrix operator*(const Matrix& b) const {
        assert(m == b.n);
        Matrix res(n, b.m);
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < b.m; ++j)
                for (int k = 0; k < m; ++k)
                    res.a[i][j] = (res.a[i][j] + 1LL * a[i][k] * b.a[k][j]) % MOD;
        return res;
    }

    Matrix pow(long long exp) const {
        assert(n == m);
        Matrix res(n, n), base = *this;
        res.make_identity();
        while (exp) {
            if (exp & 1) res = res * base;
            base = base * base;
            exp >>= 1;
        }
        return res;
    }
};

// Example Use Case: Path Counting
// Given adjacency matrix A, count number of length-K paths between all pairs
int main() {
    ios::sync_with_stdio(false); cin.tie(0);

    int n; long long k;
    cin >> n >> k;

    Matrix adj(n, n);
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            cin >> adj.a[i][j];

    Matrix res = adj.pow(k);

    int total_paths = 0;
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            total_paths = (total_paths + res.a[i][j]) % MOD;

    cout << total_paths << '\n';
    return 0;
}
