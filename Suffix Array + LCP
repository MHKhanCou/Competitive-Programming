
// Function to build suffix array
vector<int> build_sa(const string &s)
{
    int n = s.size();
    vector<int> sa(n), c(n);
    // Initial sorting based on first character
    {
        vector<int> count(256, 0);  // As there are 256 possible characters in ASCII
        for (char ch : s) count[ch]++;
        for (int i = 1; i < 256; i++) count[i] += count[i - 1];
        for (int i = n - 1; i >= 0; i--) sa[--count[s[i]]] = i;
        c[sa[0]] = 0;
        for (int i = 1; i < n; i++)
        {
            c[sa[i]] = c[sa[i - 1]] + (s[sa[i]] != s[sa[i - 1]]);
        }
    }
    // Sort by 2^k-length prefixes
    for (int k = 0; (1 << k) < n; k++)
    {
        // Update the order of suffixes in the array
        for (int i = 0; i < n; i++)
        {
            sa[i] = (sa[i] - (1 << k) + n) % n;
        }
        vector<int> cnt(n + 1, 0);
        for (int x : c) cnt[x + 1]++;
        for (int i = 1; i < n; i++) cnt[i] += cnt[i - 1];
        vector<int> sa_new(n);
        for (int x : sa) sa_new[cnt[c[x]]++] = x;
        sa.swap(sa_new);
        // Update ranks
        vector<int> c_new(n);
        c_new[sa[0]] = 0;
        for (int i = 1; i < n; i++)
        {
            pair<int, int> prev = {c[sa[i - 1]], c[(sa[i - 1] + (1 << k)) % n]};
            pair<int, int> curr = {c[sa[i]], c[(sa[i] + (1 << k)) % n]};
            c_new[sa[i]] = c_new[sa[i - 1]] + (prev != curr);
        }
        c.swap(c_new);
    }
    return sa;
}

// Function to build LCP array
vector<int> build_lcp(const string &s, const vector<int> &sa) {
    int n = s.size();
    vector<int> lcp(n), c(n);
    for (int i = 0; i < n; i++) c[sa[i]] = i;
    int h = 0;
    for (int i = 0; i < n; i++) {
        if (c[i] == 0) continue; // First suffix in SA has no previous suffix
        int j = sa[c[i] - 1];
        while (i + h < n && j + h < n && s[i + h] == s[j + h]) h++;
        lcp[c[i]] = h;
        if (h > 0) h--; // Reduce for the next comparison
    }
    return lcp;
}
