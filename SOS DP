// In the name of Allah, the Most Merciful, the Most Gracious
#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define pb push_back
#define vl vector<ll>
#define mh ios::sync_with_stdio(false); cin.tie(0);
#define tst int t;cin>>t;while(t--)
#define nl '\n'

// Max number of bits to consider in bitmask (for values up to 2^20)
const int B = 20;

// Arrays for input, and DP results
int a[1 << B];   // input array (stores numbers from 1 to n)
int f[1 << B];   // f[mask] = number of values y such that y ⊆ mask
int g[1 << B];   // g[mask] = number of values y such that y ⊇ mask

// ================================
// Sum Over Subsets (SOS DP)
// f[mask] = sum_{s ⊆ mask} freq[s]
// ================================
void sos_dp_subsets() {
    for (int i = 0; i < B; ++i) {
        for (int mask = 0; mask < (1 << B); ++mask) {
            if (mask & (1 << i)) {
                f[mask] += f[mask ^ (1 << i)];
            }
        }
    }
}

// ================================
// Sum Over Supersets
// g[mask] = sum_{s ⊇ mask} freq[s]
// ================================
void sos_dp_supersets() {
    for (int i = 0; i < B; ++i) {
        for (int mask = 0; mask < (1 << B); ++mask) {
            if (mask & (1 << i)) {
                g[mask ^ (1 << i)] += g[mask];
            }
        }
    }
}

// ================================
// Submask Traversal
// Iterate all submasks s of a given mask m:
// for (int s = m; s; s = (s - 1) & m) { /* use s */ }
// To include the empty submask, add one more iteration for s=0.
// ================================
void traverse_submasks(int m) {
    // non-empty submasks
    for (int s = m; s; s = (s - 1) & m) {
        // process submask s
    }
    // empty submask
    // process submask 0 if needed
}

// ================================
// Supermask Traversal
// Iterate all supermasks S that satisfy m ⊆ S ≤ FULL:
// int inv = ((1 << B) - 1) ^ m;
// for (int t = inv; ; t = (t - 1) & inv) {
//   int sup = t | m;
//   // process sup
//   if (t == 0) break;
// }
// ================================
void traverse_supermasks(int m) {
    int inv = ((1 << B) - 1) ^ m;
    for (int t = inv; ; t = (t - 1) & inv) {
        int sup = t | m;
        // process supermask sup
        if (t == 0) break;
    }
}

int main() {
    mh;
    int n;
    cin >> n;
    for (int i = 1; i <= n; ++i) {
        cin >> a[i];
        f[a[i]]++;  // for subset-sums
        g[a[i]]++;  // for superset-sums
    }

    // Run SOS dp for subsets and supersets
    sos_dp_subsets();
    sos_dp_supersets();

    // Example outputs:
    // f[m] = number of input values y with y ⊆ m
    // g[m] = number of input values y with y ⊇ m
    for (int i = 1; i <= n; ++i) {
        int m = a[i];
        cout << "# of y ⊆ " << bitset<B>(m) << ": " << f[m] << nl;
        cout << "# of y ⊇ " << bitset<B>(m) << ": " << g[m] << nl;
    }

    // ================================
    // Note on advanced hybrid technique:
    // In problems where you maintain a dynamic multiset of bitmasks
    // and must support add, delete, and count(a ⊆ x), you can combine:
    //  1. Submask traversal for "light" masks (popcount small)
    //  2. Supermask traversal + Inclusion–Exclusion for "heavy" masks (popcount large)
    // This achieves ~O(Q * 2^(min(pc(x), B-pc(x)))) per operation.
    // Techniques used:
    //  - __builtin_popcount for thresholding
    //  - iterate over all submasks of mask
    //  - iterate over all supermasks via complement enumeration
    //  - Inclusion–Exclusion to correct overcount of non-subsets
    // ================================

    return 0;
}
